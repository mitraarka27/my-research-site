---
interface Link { label: string; href: string }
const { entry, href }: { entry: { data: any; slug: string }, href: string } = Astro.props;

const {
  title,
  abstract,             // write math here using HTML, e.g. w<sub>e</sub> (NOT $...$)
  tags = [],
  links = [],
  date,
  status,
  venue
} = entry.data;

const yyyy = new Date(date).getFullYear();
---
<article class="p-6 md:p-8 bg-white shadow-xl rounded-xl">
  <div class="flex items-baseline gap-2 text-sm text-gray-500">
    <span class="uppercase tracking-wider">{status}</span>
    <span class="mx-1" aria-hidden="true">&middot;</span>
    <span>{yyyy}{venue ? ` • ${venue}` : ""}</span>
  </div>

  <h3 class="mt-2 text-xl font-bold text-gray-900">
    <a href={href} class="hover:underline">{title}</a>
  </h3>

  <!-- Abstract as trusted HTML to avoid text-node splits & weird linebreaks -->
  <p class="mt-3 text-gray-700">
    <Fragment set:html={abstract} />
  </p>

  <div class="mt-4 flex flex-wrap gap-2">
    {tags.map((t: string) => (
      <a href={`/tags/${encodeURIComponent(t)}`} class="px-3 py-1 rounded-full bg-gray-100 hover:bg-gray-200 text-sm">{t}</a>
    ))}
  </div>

  {links?.length ? (
    <div class="mt-4 flex flex-wrap gap-3 text-sm">
      {links.map((l: Link) => (
        <a href={l.href} target="_blank" rel="noopener" class="underline">{l.label} ↗</a>
      ))}
    </div>
  ) : null}
</article>
